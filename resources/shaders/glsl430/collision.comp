#version 430

#define NUM_BODIES 4096
#define RADIUS 1.0f

struct nbody
{
    float px;
    float py;
    float pz;
    float vx;
    float vy;
    float vz;
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly restrict buffer nbodyLayout {
    nbody nbodies[];
};

layout(std430, binding = 1) writeonly restrict buffer nbodyLayout2 {
    nbody nbodiesDest[];
};

void main() {
    uint id = (gl_GlobalInvocationID.x + 16 * gl_GlobalInvocationID.y + 256 * gl_GlobalInvocationID.z);

    nbody newBody = nbodies[id];

    for (uint i = 0; i < NUM_BODIES; i++)
    {
        if (id != i)
        {
            nbody otherBody = nbodies[i];

            float dist = distance(vec3(
                newBody.px,
                newBody.py,
                newBody.pz
            ), vec3(
                otherBody.px,
                otherBody.py,
                otherBody.pz
            ));

            if (dist < (2.0f * RADIUS))
            {   
                vec3 unit = normalize(vec3(
                    newBody.px - otherBody.px,
                    newBody.py - otherBody.py,
                    newBody.pz - otherBody.pz
                ));

                float depth = (((2.0f * RADIUS) - dist) / 1.99f);
                newBody.px += unit.x * depth;
                newBody.py += unit.y * depth;
                newBody.pz += unit.z * depth;

                float b1Vel = dot(vec3(newBody.vx, newBody.vy, newBody.vz), unit);
                float b2Vel = dot(vec3(otherBody.vx, otherBody.vy, otherBody.vz), unit);

                float result = (b1Vel + b2Vel) / 2.0f;

                newBody.vx -= unit.x * result;
                newBody.vy -= unit.y * result;
                newBody.vz -= unit.z * result;
            }
        }
    }

    nbodiesDest[id] = newBody;
}
